!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/felix/dotfiles/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/787811b6/
$FZF_DEFAULT_COMMAND	backup/vimrc	/^  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'$/;"	v
$FZF_DEFAULT_COMMAND	backup/vimrc	/^  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git\/*"'$/;"	v
$FZF_DEFAULT_COMMAND	backup/vimrc	/^let $FZF_DEFAULT_COMMAND =  "find * -path '*\/\\.*' -prune -o -path 'node_modules\/**' -prune -o/;"	v
$FZF_DEFAULT_OPTS	backup/vimrc	/^let $FZF_DEFAULT_OPTS = '--info=inline'$/;"	v
$NVIM_TUI_ENABLE_TRUE_COLOR	backup/init.vim	/^  let $NVIM_TUI_ENABLE_TRUE_COLOR=1$/;"	v
$NVIM_TUI_ENABLE_TRUE_COLOR	backup/vimrc	/^  let $NVIM_TUI_ENABLE_TRUE_COLOR=1$/;"	v
//	backup/vimrc	/^vnoremap \/\/ y\/<C-R>"<CR>$/;"	m
<C-d>	backup/vimrc	/^nmap <C-d> <C-e><C-e><C-e><C-e><C-e><C-e><C-e>$/;"	m
<C-h>	backup/init.vim	/^map <C-h> :bp<CR>$/;"	m
<C-l>	backup/init.vim	/^map <C-l> :bn<CR>$/;"	m
<C-u>	backup/vimrc	/^nmap <C-u> <C-y><C-y><C-y><C-y><C-y><C-y><C-y>$/;"	m
<S-TAB>	backup/coc.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	backup/coc.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<cr>	backup/coc.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>b	backup/init.vim	/^nnoremap <leader>b <cmd>Telescope buffers<cr>$/;"	m
<leader>b	backup/vimrc	/^nnoremap <silent> <leader>b :Buffers<CR>$/;"	m
<leader>bd	backup/init.vim	/^nnoremap <leader>bd :bd<cr>$/;"	m
<leader>bn	backup/vimrc	/^map <leader>bn :bn!<CR>$/;"	m
<leader>bp	backup/vimrc	/^map <leader>bp :bp!<CR>$/;"	m
<leader>cc	backup/init.vim	/^map <leader>cc :Commentary<CR>$/;"	m
<leader>cc	backup/vimrc	/^map <leader>cc :Commentary<CR>$/;"	m
<leader>ee	backup/vimrc	/^noremap <leader>ee :CocCommand explorer<CR>$/;"	m
<leader>et	backup/vimrc	/^noremap <leader>et :Lex<CR>$/;"	m
<leader>ff	backup/init.vim	/^nnoremap <leader>ff <cmd>Telescope find_files<cr>$/;"	m
<leader>ff	backup/vimrc	/^nnoremap <silent> <leader>ff :FZF -m<CR>$/;"	m
<leader>fg	backup/init.vim	/^nnoremap <leader>fg <cmd>Telescope live_grep<cr>$/;"	m
<leader>fh	backup/init.vim	/^nnoremap <leader>fh <cmd>Telescope help_tags<cr>$/;"	m
<leader>frg	backup/vimrc	/^map <leader>frg :Ranger<CR>$/;"	m
<leader>fs	backup/init.vim	/^nnoremap <leader>fs :w<cr>$/;"	m
<leader>fs	backup/vimrc	/^nnoremap <leader>fs :w<cr>$/;"	m
<leader>ft	backup/vimrc	/^noremap <leader>ft :TagbarToggle<CR>$/;"	m
<leader>gb	backup/init.vim	/^nmap <leader>gb :G branch<CR>$/;"	m
<leader>gc	backup/init.vim	/^nmap <leader>gc :G commit<CR>$/;"	m
<leader>gc	backup/vimrc	/^nmap <leader>gc :G commit<CR>$/;"	m
<leader>gd	backup/init.vim	/^nmap <leader>gd :G diff<CR>$/;"	m
<leader>gg	backup/init.vim	/^nmap <leader>gg :G<CR>$/;"	m
<leader>gg	backup/vimrc	/^nmap <leader>gg :G<CR>$/;"	m
<leader>gn	backup/init.vim	/^nmap <leader>gn :G checkout -b $/;"	m
<leader>gp	backup/init.vim	/^nmap <leader>gp :G push<CR>$/;"	m
<leader>gp	backup/vimrc	/^nmap <leader>gp :G push $/;"	m
<leader>j	backup/init.vim	/^nmap <leader>j <Plug>(easymotion-overwin-f2)$/;"	m
<leader>q	backup/vimrc	/^noremap <leader>q :q!<cr>$/;"	m
<leader>rg	backup/vimrc	/^vnoremap <leader>rg y:Rg <C-R>"<CR>$/;"	m
<leader>rn	backup/coc.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>t	backup/init.vim	/^nnoremap <leader>t :NvimTreeToggle<CR>$/;"	m
<leader>wD	backup/init.vim	/^map <leader>wD <C-w>o<CR>$/;"	m
<leader>wd	backup/init.vim	/^map <leader>wd <C-w>q<CR>$/;"	m
<leader>wd	backup/vimrc	/^map <leader>wd <C-w>q<CR>$/;"	m
<leader>wg	backup/init.vim	/^map <leader>wg :sp<CR>$/;"	m
<leader>wg	backup/vimrc	/^map <leader>wg :sp<CR>$/;"	m
<leader>wh	backup/vimrc	/^noremap <leader>wh <C-w>h$/;"	m
<leader>wj	backup/vimrc	/^noremap <leader>wj <C-w>j$/;"	m
<leader>wk	backup/vimrc	/^noremap <leader>wk <C-w>k$/;"	m
<leader>wl	backup/vimrc	/^noremap <leader>wl <C-w>l$/;"	m
<leader>wv	backup/init.vim	/^map <leader>wv :vs<CR>$/;"	m
<leader>wv	backup/vimrc	/^map <leader>wv :vs<CR>$/;"	m
Brew	README.md	/^## Brew$/;"	s
FastEscape	backup/vimrc	/^augroup FastEscape$/;"	a
Find	backup/vimrc	/^  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed/;"	c
Fold	backup/coc.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Fonts	README.md	/^## Fonts$/;"	s
Format	backup/coc.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
J	backup/vimrc	/^vnoremap J :m '>+1<CR>gv=gv$/;"	m
K	backup/coc.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
K	backup/vimrc	/^vnoremap K :m '<-2<CR>gv=gv$/;"	m
Kitty Term	README.md	/^## Kitty Term$/;"	s
OR	backup/coc.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
OrgImports	lua/lsp.lua	/^function OrgImports(wait_ms)$/;"	f
Prettier	backup/vimrc	/^command! -nargs=0 Prettier :CocCommand prettier.formatFile$/;"	c
Q	backup/vimrc	/^nnoremap Q @q$/;"	m
Q	backup/vimrc	/^vnoremap Q :norm @q<cr>$/;"	m
Setup Neovim	README.md	/^## Setup Neovim$/;"	s
XX	backup/init.vim	/^noremap XX "+x<CR>$/;"	m
XX	backup/vimrc	/^noremap XX "+x<CR>$/;"	m
YY	backup/init.vim	/^noremap YY "+y<CR>$/;"	m
YY	backup/vimrc	/^noremap YY "+y<CR>$/;"	m
buffer_not_empty	lua/evalline.lua	/^    buffer_not_empty = function()$/;"	f
check_git_workspace	lua/evalline.lua	/^    check_git_workspace = function()$/;"	f
cmp_next_item	lua/lsp.lua	/^local cmp_next_item = function(fallback)$/;"	f
cmp_previous_item	lua/lsp.lua	/^local cmp_previous_item = function(fallback)$/;"	f
color	lua/evalline.lua	/^    color = function()$/;"	f
config	init.lua	/^        config = function()$/;"	f
enabled_layouts tall	kitty.conf	/^enabled_layouts tall:bias=50;full_size=1;mirrored=false$/;"	k
expand	lua/lsp.lua	/^        expand = function(args)$/;"	f
fg	tmux.conf	/^set -g window-active-style 'fg=default,bg=colour234'$/;"	k
fg	tmux.conf	/^set -g window-style 'fg=colour247,bg=colour236'$/;"	k
g:AutoPairsMapCh	backup/vimrc	/^let g:AutoPairsMapCh = 0$/;"	v
g:BufKillCreateMappings	backup/vimrc	/^let g:BufKillCreateMappings = 0$/;"	v
g:EasyMotion_do_mapping	backup/vimrc	/^let g:EasyMotion_do_mapping = 0 " Disable default mappings$/;"	v
g:EasyMotion_smartcase	backup/init.vim	/^let g:EasyMotion_smartcase = 1$/;"	v
g:EasyMotion_smartcase	backup/vimrc	/^let g:EasyMotion_smartcase = 1$/;"	v
g:airline#extensions#ale#enabled	backup/vimrc	/^let g:airline#extensions#ale#enabled = 1$/;"	v
g:airline#extensions#tabline#enabled	backup/init.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#enabled	backup/vimrc	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#formatter	backup/vimrc	/^let g:airline#extensions#tabline#formatter = 'unique_tail'$/;"	v
g:airline_theme	backup/init.vim	/^let g:airline_theme='luna'$/;"	v
g:coc_global_extensions	backup/coc.vim	/^let g:coc_global_extensions = ['coc-json', 'coc-git', 'coc-pyright', 'coc-prettier', 'coc-tsserv/;"	v
g:floaterm_keymap_toggle	backup/vimrc	/^let g:floaterm_keymap_toggle = '<F12>'$/;"	v
g:fzf_action	backup/vimrc	/^let g:fzf_action = {$/;"	v
g:fzf_preview_window	backup/vimrc	/^let g:fzf_preview_window = []$/;"	v
g:fzf_tags_command	backup/vimrc	/^let g:fzf_tags_command = 'ctags -R'$/;"	v
g:go_auto_sameids	backup/vimrc	/^let g:go_auto_sameids = 0$/;"	v
g:go_auto_type_info	backup/vimrc	/^let g:go_auto_type_info = 1$/;"	v
g:go_def_mode	backup/vimrc	/^let g:go_def_mode='gopls'$/;"	v
g:go_echo_command_info	backup/vimrc	/^let g:go_echo_command_info = 0$/;"	v
g:go_fmt_autosave	backup/vimrc	/^let g:go_fmt_autosave = 0$/;"	v
g:go_fmt_command	backup/vimrc	/^let g:go_fmt_command = "gofmt"$/;"	v
g:go_highlight_build_constraints	backup/vimrc	/^let g:go_highlight_build_constraints = 1$/;"	v
g:go_highlight_extra_types	backup/vimrc	/^let g:go_highlight_extra_types = 0$/;"	v
g:go_highlight_fields	backup/vimrc	/^let g:go_highlight_fields = 0$/;"	v
g:go_highlight_functions	backup/vimrc	/^let g:go_highlight_functions = 0$/;"	v
g:go_highlight_methods	backup/vimrc	/^let g:go_highlight_methods = 0$/;"	v
g:go_highlight_operators	backup/vimrc	/^let g:go_highlight_operators = 0$/;"	v
g:go_highlight_structs	backup/vimrc	/^let g:go_highlight_structs = 0$/;"	v
g:go_highlight_types	backup/vimrc	/^let g:go_highlight_types = 0$/;"	v
g:go_info_mode	backup/vimrc	/^let g:go_info_mode='gopls'$/;"	v
g:go_rename_command	backup/vimrc	/^let g:go_rename_command = 'gopls'$/;"	v
g:go_term_enabled	backup/vimrc	/^let g:go_term_enabled=0$/;"	v
g:go_updatetime	backup/vimrc	/^let g:go_updatetime = 800$/;"	v
g:loaded_matchparen	backup/vimrc	/^let g:loaded_matchparen=1$/;"	v
g:netrw_altv	backup/init.vim	/^let g:netrw_altv         = 1$/;"	v
g:netrw_altv	backup/vimrc	/^let g:netrw_altv         = 1$/;"	v
g:netrw_banner	backup/init.vim	/^let g:netrw_banner       = 0$/;"	v
g:netrw_banner	backup/vimrc	/^let g:netrw_banner       = 0$/;"	v
g:netrw_browse_split	backup/init.vim	/^let g:netrw_browse_split = 0$/;"	v
g:netrw_browse_split	backup/vimrc	/^let g:netrw_browse_split = 0$/;"	v
g:netrw_liststyle	backup/init.vim	/^let g:netrw_liststyle    = 0$/;"	v
g:netrw_liststyle	backup/vimrc	/^let g:netrw_liststyle    = 0$/;"	v
g:netrw_usetab	backup/init.vim	/^let g:netrw_usetab       = 1$/;"	v
g:netrw_usetab	backup/vimrc	/^let g:netrw_usetab       = 1$/;"	v
g:netrw_winsize	backup/init.vim	/^let g:netrw_winsize      = 25$/;"	v
g:netrw_winsize	backup/vimrc	/^let g:netrw_winsize      = 25$/;"	v
g:not_finish_vimplug	backup/init.vim	/^  let g:not_finish_vimplug = "yes"$/;"	v
g:not_finish_vimplug	backup/vimrc	/^  let g:not_finish_vimplug = "yes"$/;"	v
g:ranger_map_keys	backup/vimrc	/^let g:ranger_map_keys = 0$/;"	v
gd	backup/coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	backup/coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gopkgs	backup/vimrc	/^augroup gopkgs$/;"	a
gr	backup/coc.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	backup/coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
hide_in_width	lua/evalline.lua	/^    hide_in_width = function()$/;"	f
imap	lua/mappings.lua	/^local function imap(shortcut, command)$/;"	f
ins_left	lua/evalline.lua	/^local function ins_left(component)$/;"	f
ins_right	lua/evalline.lua	/^local function ins_right(component)$/;"	f
map	lua/mappings.lua	/^local function map(mode, shortcut, command)$/;"	f
mapleader	backup/init.vim	/^let mapleader=' '$/;"	v
mapleader	backup/vimrc	/^let mapleader=' '$/;"	v
mygroup	backup/coc.vim	/^augroup mygroup$/;"	a
myprevious-window	emacs/init.el	/^(defun myprevious-window ()$/;"	f
nmap	lua/mappings.lua	/^local function nmap(shortcut, command)$/;"	f
on_attach	lua/lsp.lua	/^local on_attach = function(client, bufnr)$/;"	f
s	backup/vimrc	/^nmap s <Plug>(easymotion-overwin-f)$/;"	m
s	backup/vimrc	/^nmap s <Plug>(easymotion-overwin-f2)$/;"	m
s:check_back_space	backup/coc.vim	/^function! s:check_back_space() abort$/;"	f
s:gitModified	backup/vimrc	/^function! s:gitModified()$/;"	f
s:gitUntracked	backup/vimrc	/^function! s:gitUntracked()$/;"	f
s:show_documentation	backup/coc.vim	/^function! s:show_documentation()$/;"	f
set-exec-path-from-shell-PATH	emacs/init.el	/^(defun set-exec-path-from-shell-PATH ()$/;"	f
style fg	tmux.conf	/^setw -g window-status-current-style fg=black,bg=white$/;"	k
tmap	lua/mappings.lua	/^local function tmap(shortcut, command)$/;"	f
vimplug_exists	backup/init.vim	/^let vimplug_exists=expand('~\/.vim\/autoload\/plug.vim')$/;"	v
vimplug_exists	backup/vimrc	/^let vimplug_exists=expand('~\/.vim\/autoload\/plug.vim')$/;"	v
vmap	lua/mappings.lua	/^local function vmap(shortcut, command)$/;"	f
